name: Vulnerability Scanning & Subdomain Detection

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '13 1 * * *'  # Runs once daily at 1:13 AM UTC

jobs:
  vulnerability-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 180  # Failsafe to prevent 6-hour runs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Subdomain Tools
        uses: actions/cache@v3
        id: cache-tools
        with:
          path: |
            ~/go/bin/assetfinder
            /usr/local/bin/amass
          key: ${{ runner.os }}-subdomain-tools-${{ hashFiles('.github/workflows/domains.txt') }}

      - name: Install Dependencies (Fast)
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends git python3 python3-pip wget unzip
          
          # Install only essential tools
          go install github.com/tomnomnom/assetfinder@latest
          sudo mv ~/go/bin/assetfinder /usr/local/bin/
          
          # Lightweight Amass install
          wget -q https://github.com/owasp-amass/amass/releases/download/v4.2.0/amass_linux_amd64.zip
          unzip -q amass_linux_amd64.zip
          sudo mv amass_linux_amd64/amass /usr/local/bin/

      - name: Fast Subdomain Detection
        id: subdomains
        run: |
          set -e
          mkdir -p subdomain_output
          
          # Parallel execution with GNU parallel
          echo "Installing parallel for faster scans..."
          sudo apt-get install -y parallel
          
          cat .github/workflows/domains.txt | parallel -j 4 '
            domain={}
            output_file="subdomain_output/${domain//\//_}_subdomains.txt"
            
            # Run tools in parallel
            assetfinder --subs-only $domain > $output_file &
            amass enum -passive -d $domain >> $output_file &
            wait
            
            # Deduplicate results
            sort -u $output_file -o $output_file
            sed -i "/^$/d" $output_file
            
            echo "Found $(wc -l < $output_file) subdomains for $domain"
          '
          
          # Check for new subdomains (simplified diff logic)
          if [ -d "old_subdomains" ]; then
            new_subdomains=$(find subdomain_output -type f -exec bash -c \
              'diff -q {} old_subdomains/$(basename {}) >/dev/null || echo 1' \; | wc -l)
          else
            new_subdomains=1
          fi
          
          echo "new_subdomains_detected=$([ $new_subdomains -gt 0 ] && echo true || echo false)" >> $GITHUB_ENV
          mkdir -p old_subdomains && cp subdomain_output/* old_subdomains/ || true

      - name: Lightweight Vulnerability Scan
        if: env.new_subdomains_detected == 'true'
        run: |
          mkdir -p scans
          
          # Fast nmap scan for critical ports only
          cat .github/workflows/domains.txt | parallel -j 2 '
            nmap -T4 --top-ports 100 -oN scans/nmap-{}.txt {}
          '
          
          # Nikto scan only on HTTP/HTTPS ports found
          grep -hE "80/open|443/open" scans/nmap-*.txt | awk "{print \$2}" | parallel -j 2 '
            nikto -h {} -timeout 3 -nointeractive -Format htm -output scans/nikto-{}.html
          '

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: security-scans-${{ github.run_id }}
          path: |
            subdomain_output/*
            scans/*

      - name: Slack Notification
        if: always()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "ðŸš€ Scan completed in ${{ job.status }} state",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*${{ github.workflow }}* completed for ${{ github.repository }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Status:* ${{ job.status }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Duration:* ${{ job.steps.*.conclusion }} minutes"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
