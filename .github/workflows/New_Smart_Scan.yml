name: Advanced Vulnerability Scan Suite

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
  schedule:
    - cron: '0 3 * * *'  # Daily at 3 AM
  workflow_dispatch:

env:
  NUCLEI_TEMPLATES_DIR: /tmp/nuclei-templates
  MAX_SCAN_TIME: 7200  # 2 hours timeout

jobs:
  reconnaissance:
    runs-on: ubuntu-latest
    outputs:
      target_count: ${{ steps.targets.outputs.count }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Recon Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq python3-pip
          pip install --upgrade pip
          go install github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          go install github.com/tomnomnom/assetfinder@latest
          go install github.com/lc/gau/v2/cmd/gau@latest
          sudo mv ~/go/bin/* /usr/local/bin/

      - name: Run Comprehensive Discovery
        id: targets
        run: |
          mkdir -p targets
          cat .github/workflows/domains.txt | while read -r domain; do
            subfinder -d "$domain" -silent | httpx -silent -status-code -title -tech-detect -json -o "targets/${domain//./_}.json"
            gau "$domain" --subs | httpx -silent >> "targets/${domain//./_}.txt"
          done
          echo "count=$(find targets -type f -name "*.json" | wc -l)" >> $GITHUB_OUTPUT

  scanning:
    needs: reconnaissance
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ${{ fromJson(format('[{0}]', join(',', steps.get-targets.outputs.targets)) }}
    steps:
      - uses: actions/checkout@v4

      - name: Get Scan Targets
        id: get-targets
        run: |
          targets=$(jq -r '.url' targets/*.json | tr '\n' ',' | sed 's/,$//')
          echo "targets=[$targets]" >> $GITHUB_OUTPUT

      - name: Install Scanning Tools
        run: |
          go install github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest
          nuclei -update-templates
          sudo mv ~/go/bin/nuclei /usr/local/bin/
          docker pull wpscanteam/wpscan

      - name: Run Nuclei Deep Scan
        timeout-minutes: 120
        run: |
          mkdir -p scan_results
          nuclei -u "${{ matrix.target }}" \
            -t ~/nuclei-templates/ \
            -severity low,medium,high,critical \
            -retries 2 \
            -rate-limit 50 \
            -timeout 30 \
            -si 100 \
            -j -o "scan_results/nuclei_${GITHUB_RUN_ID}.json" \
            -stats -metrics

      - name: Run Specialized Scans
        run: |
          # WordPress Scanning
          if echo "${{ matrix.target }}" | grep -q "wordpress"; then
            docker run --rm wpscanteam/wpscan \
              --url "${{ matrix.target }}" \
              --format json \
              --output "scan_results/wpscan_${GITHUB_RUN_ID}.json"
          fi

          # XSS Scanning
          dalfox url "${{ matrix.target }}" \
            --output "scan_results/xss_${GITHUB_RUN_ID}.json" \
            --format json

  post_processing:
    needs: scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: scan_results

      - name: Generate Consolidated Report
        run: |
          mkdir -p reports
          jq -s 'flatten' scan_results/*.json > reports/combined_results.json
          
          # Create executive summary
          echo "# Security Scan Report" > reports/executive_summary.md
          echo "Generated: $(date)" >> reports/executive_summary.md
          echo "## Findings Overview" >> reports/executive_summary.md
          echo "Total Vulnerabilities: $(jq 'length' reports/combined_results.json)" >> reports/executive_summary.md
          echo "Critical: $(jq '[.[] | select(.info.severity == "critical")] | length' reports/combined_results.json)" >> reports/executive_summary.md
          echo "High: $(jq '[.[] | select(.info.severity == "high")] | length' reports/combined_results.json)" >> reports/executive_summary.md

      - name: Upload Reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: reports/

  notification:
    needs: post_processing
    runs-on: ubuntu-latest
    steps:
      - name: Download Report
        uses: actions/download-artifact@v3
        with:
          name: security-reports
          path: reports/

      - name: Send Smart Notification
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          critical=$(jq '[.[] | select(.info.severity == "critical")] | length' reports/combined_results.json)
          high=$(jq '[.[] | select(.info.severity == "high")] | length' reports/combined_results.json)
          
          if [ "$critical" -gt 0 ]; then
            color="#ff0000"
            priority="URGENT"
            icon=":fire:"
          elif [ "$high" -gt 0 ]; then
            color="#ff9900"
            priority="High"
            icon=":warning:"
          else
            color="#36a64f"
            priority="Normal"
            icon=":white_check_mark:"
          fi

          payload=$(jq -n \
            --arg text "$icon Security Scan Completed ($priority)" \
            --arg color "$color" \
            --arg critical "$critical" \
            --arg high "$high" \
            --arg run_url "https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
            '{
              "attachments": [
                {
                  "color": $color,
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "*\($text)*"
                      }
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Critical Findings*\n\($critical)"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*High Findings*\n\($high)"
                        }
                      ]
                    },
                    {
                      "type": "actions",
                      "elements": [
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "View Full Report"
                          },
                          "url": $run_url
                        }
                      ]
                    }
                  ]
                }
              ]
            }')

          curl -X POST $SLACK_WEBHOOK \
            -H "Content-type: application/json" \
            --data "$payload"
