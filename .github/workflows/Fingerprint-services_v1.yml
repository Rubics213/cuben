name: Fingerprint Targets

on:
  workflow_dispatch:
  schedule:
    - cron: '15 3 * * *'
    - cron: '45 12 * * *'

jobs:
  fingerprint:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      # TEMPORARY hardcoded credentials for testing
      SHOPIFY_USERNAME: "beetlejuice997@outlook.com"
      SHOPIFY_PASSWORD: "B33tl3j92@"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Tools
        run: |
          set -e
          sudo apt update && sudo apt install -y whatweb curl jq unzip python3-pip
          pip3 install requests
          go install github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          sudo cp "$(go env GOPATH)/bin/nuclei" /usr/local/bin/
          sudo cp "$(go env GOPATH)/bin/httpx" /usr/local/bin/
          nuclei -update-templates -silent

      - name: Verify domains file
        run: |
          set -e
          if [ ! -f ".github/workflows/domains.txt" ]; then
            echo "Missing domains.txt"
            exit 1
          fi
          cat .github/workflows/domains.txt

      - name: Run Login Script
        run: |
          set -e
          python3 .github/workflows/login_script.py

      - name: Fingerprint Targets
        env:
          USER_AGENT: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"
        run: |
          set -e
          mkdir -p fingerprint_results
          domain_count=0
          while IFS= read -r domain; do
            [ -z "$domain" ] && continue
            domain_count=$((domain_count+1))
            echo "Probing $domain"
            echo "$domain" | httpx -tech-detect -status-code -title -web-server -json -H "User-Agent: $USER_AGENT" > "fingerprint_results/${domain//./_}_httpx.json" || echo "Httpx failed for $domain"
            whatweb --log-verbose="fingerprint_results/${domain//./_}_whatweb.txt" --user-agent="$USER_AGENT" "https://$domain" || echo "Whatweb failed for $domain"
            echo "https://$domain" | nuclei -silent -tags "tech" -H "User-Agent: $USER_AGENT" -o "fingerprint_results/${domain//./_}_nuclei_tech.txt" || echo "Nuclei failed for $domain"
          done < .github/workflows/domains.txt
          echo "TARGET_COUNT=$domain_count" >> $GITHUB_ENV

      - name: Upload Fingerprint Results
        uses: actions/upload-artifact@v4
        with:
          name: fingerprint-results-${{ github.run_id }}
          path: fingerprint_results/

      - name: Notify Slack (Success)
        if: success()
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const webhook = process.env.SLACK_HOOK;
            const payload = {
              text: `‚úÖ Fingerprint scan completed.`,
              blocks: [
                {
                  type: "section",
                  text: {
                    type: "mrkdwn",
                    text: `*üéØ Fingerprint Scan Results*\n*Repository:* ${process.env.GITHUB_REPOSITORY}\n*Branch:* ${process.env.GITHUB_REF}\n*Commit:* ${process.env.GITHUB_SHA}\n*Run ID:* ${process.env.GITHUB_RUN_ID}`
                  }
                },
                {
                  type: "section",
                  text: {
                    type: "mrkdwn",
                    text: `*Scan Details:*\n‚Ä¢ Domains scanned: ${process.env.TARGET_COUNT || 'unknown'}\n‚Ä¢ Tools used: \`httpx\`, \`whatweb\`, \`nuclei\`\n‚Ä¢ Result Artifact: \`fingerprint-results-${process.env.GITHUB_RUN_ID}\``
                  }
                },
                {
                  type: "context",
                  elements: [
                    {
                      type: "mrkdwn",
                      text: `üïí Timestamp: ${new Date().toISOString()}`
                    }
                  ]
                }
              ]
            };

            fetch(webhook, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
            });
        env:
          SLACK_HOOK: ${{ secrets.SLACK_HOOK }}

      - name: Notify Slack (Failure)
        if: failure()
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const webhook = process.env.SLACK_HOOK;
            const payload = {
              text: `‚ùå Fingerprint scan *FAILED*.`,
              blocks: [
                {
                  type: "section",
                  text: {
                    type: "mrkdwn",
                    text: `*üî• Scan Failure Alert*\n*Repository:* ${process.env.GITHUB_REPOSITORY}\n*Branch:* ${process.env.GITHUB_REF}\n*Commit:* ${process.env.GITHUB_SHA}\n*Run ID:* ${process.env.GITHUB_RUN_ID}`
                  }
                },
                {
                  type: "context",
                  elements: [
                    {
                      type: "mrkdwn",
                      text: `üïí Timestamp: ${new Date().toISOString()}`
                    }
                  ]
                }
              ]
            };

            fetch(webhook, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
            });
        env:
          SLACK_HOOK: ${{ secrets.SLACK_HOOK }}
