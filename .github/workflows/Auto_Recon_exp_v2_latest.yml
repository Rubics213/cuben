name: Vulnerability Scanning & Subdomain Detection

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '13 1 * * *'
    - cron: '47 5 * * *'
    - cron: '29 9 * * *'
    - cron: '53 14 * * *'
    - cron: '11 18 * * *'

jobs:
  vulnerability-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install scanning dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git python3 python3-pip nikto nmap unzip wget
          python3 -m pip install --upgrade pip
          
          # Install Sublist3r (fixed version)
          git clone https://github.com/aboul3la/Sublist3r.git
          cd Sublist3r
          # Fix escape sequence warnings
          sed -i "s/\\\_/_/g" sublist3r.py
          sed -i "s/\\\//\//g" sublist3r.py
          sed -i "s/\\\-/-/g" sublist3r.py
          pip3 install -r requirements.txt
          cd ..
          
          # Install Amass
          wget https://github.com/owasp-amass/amass/releases/download/v4.2.0/amass_linux_amd64.zip
          unzip amass_linux_amd64.zip
          sudo mv amass_linux_amd64/amass /usr/local/bin/
          
          # Install ZAP standalone instead of Docker version
          wget https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2.14.0_Linux.tar.gz
          tar -xzf ZAP_2.14.0_Linux.tar.gz
          sudo mv ZAP_2.14.0 /opt/zaproxy
          sudo ln -s /opt/zaproxy/zap.sh /usr/local/bin/zap

      - name: Verify domains file exists
        run: |
          if [ ! -f ".github/workflows/domains.txt" ]; then
            echo "ERROR: domains.txt file not found at .github/workflows/domains.txt"
            exit 1
          fi
          echo "Domains to scan:"
          cat .github/workflows/domains.txt

      - name: Detect subdomains
        id: subdomain-detection
        run: |
          set -e
          mkdir -p subdomain_output old_subdomains
          new_subdomains_detected=false
          
          while IFS= read -r domain; do
            domain=$(echo "$domain" | tr -d '\r\n') # Clean whitespace
            echo "Processing domain: $domain"
            output_file="subdomain_output/${domain//\//_}_subdomains.txt"
            
            # Run multiple subdomain discovery tools
            echo "Running Sublist3r..."
            python3 Sublist3r/sublist3r.py -d "$domain" -o "$output_file" || true
            
            echo "Running Amass..."
            /usr/local/bin/amass enum -passive -d "$domain" >> "$output_file" || true
            
            # Clean results
            sort -u "$output_file" -o "$output_file"
            sed -i '/^$/d' "$output_file"
            
            if [ -s "$output_file" ]; then
              echo "Found subdomains for $domain:"
              cat "$output_file"
              
              if [ -f "old_subdomains/${domain//\//_}_old_subdomains.txt" ]; then
                echo "Comparing with previous results..."
                if ! diff -q "$output_file" "old_subdomains/${domain//\//_}_old_subdomains.txt"; then
                  echo "New subdomains detected!"
                  new_subdomains_detected=true
                fi
              else
                echo "First run for $domain - considering all subdomains as new"
                new_subdomains_detected=true
              fi
              
              # Save current results for next run
              cp "$output_file" "old_subdomains/${domain//\//_}_old_subdomains.txt"
            else
              echo "No subdomains found for $domain"
              # Create empty file to avoid errors in future runs
              touch "old_subdomains/${domain//\//_}_old_subdomains.txt"
            fi
          done < .github/workflows/domains.txt
          
          echo "new_subdomains_detected=$new_subdomains_detected" >> $GITHUB_ENV
          echo "Subdomain detection complete. New subdomains detected: $new_subdomains_detected"

      - name: Notify Slack - New Subdomains Detected
        if: env.new_subdomains_detected == 'true'
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"üåê *New subdomains were detected.*\nStarting automated scans...\"}" \
            ${{ secrets.Slack_Hook }}

      - name: Run OWASP ZAP Scan (Standalone)
        run: |
          mkdir -p zap-reports
          echo "Running ZAP scan for all domains..."
          
          while IFS= read -r domain; do
            domain=$(echo "$domain" | tr -d '\r\n')
            echo "Scanning $domain with ZAP..."
            
            /opt/zaproxy/zap.sh -cmd -quickurl "https://$domain" \
              -quickprogress -quickout "zap-reports/zap-report-${domain//\//_}.html" || true
          done < .github/workflows/domains.txt

      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: zap-reports/*.html

      - name: Run Nikto Scan
        run: |
          mkdir -p nikto-reports
          echo "Running Nikto scans for all domains..."
          
          while IFS= read -r domain; do
            domain=$(echo "$domain" | tr -d '\r\n')
            echo "Scanning $domain with Nikto..."
            
            nikto -h "https://$domain" -Format htm -output "nikto-reports/nikto-report-${domain//\//_}.html" || true
          done < .github/workflows/domains.txt

      - name: Upload Nikto reports
        uses: actions/upload-artifact@v4
        with:
          name: nikto-reports
          path: nikto-reports/*.html

      - name: Notify Slack - Scan Complete
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"‚úÖ *All scans completed.*\nWorkflow: '${{ github.workflow }}'\nBranch: '${{ github.ref }}'\nCommit: <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>\nArtifacts: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
            ${{ secrets.Slack_Hook }}
