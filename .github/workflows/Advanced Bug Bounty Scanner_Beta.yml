name: Advanced Bug Bounty Scanner

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '13 1 * * *'
    - cron: '47 5 * * *'
    - cron: '29 9 * * *'
    - cron: '53 14 * * *'
    - cron: '11 18 * * *'

jobs:
  vulnerability-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Go binaries
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-tools-${{ hashFiles('.github/workflows/**.yml') }}
          restore-keys: |
            ${{ runner.os }}-go-tools-

      - name: Install scanning dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git python3 python3-pip nikto nmap unzip wget golang jq curl chromium-browser libpcap-dev
          echo "GOPATH=$HOME/go" >> $GITHUB_ENV
          echo "PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $GITHUB_ENV
          go install github.com/tomnomnom/assetfinder@latest
          go install github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          go install github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install github.com/projectdiscovery/naabu/v2/cmd/naabu@latest
          go install github.com/lc/gau/v2/cmd/gau@latest
          go install github.com/hakluke/hakrawler@latest
          go install github.com/tomnomnom/waybackurls@latest
          sudo mv ~/go/bin/* /usr/local/bin/
          curl -s https://api.github.com/repos/findomain/findomain/releases/latest \
            | grep "browser_download_url.*linux.zip" \
            | cut -d '"' -f 4 \
            | wget -i -
          unzip findomain-linux.zip
          chmod +x findomain
          sudo mv findomain /usr/local/bin/findomain
          nuclei -update-templates -silent

      - name: Verify domains file exists
        run: |
          if [ ! -f ".github/workflows/domains.txt" ]; then
            echo "ERROR: domains.txt file not found!"
            exit 1
          fi
          sed -i '/^\s*$/d' .github/workflows/domains.txt
          sed -i 's/\r//' .github/workflows/domains.txt
          echo "Target domains:"
          cat .github/workflows/domains.txt

      - name: Recon + Subdomain Enumeration + Fingerprinting
        id: recon
        run: |
          set -e
          mkdir -p subdomain_output old_subdomains fingerprints naabu gau hakrawler nmap wayback nuclei-reports
          new_subdomains_found=()

          while IFS= read -r domain || [[ -n "$domain" ]]; do
            domain=$(echo "$domain" | tr -d '\r\n' | xargs)
            if [[ -z "$domain" ]]; then continue; fi

            echo "üîé Processing $domain"
            out="subdomain_output/${domain//./_}_subdomains.txt"
            assetfinder --subs-only "$domain" > temp1.txt || true
            subfinder -d "$domain" -silent > temp2.txt || true
            findomain -t "$domain" --quiet > temp3.txt || true
            cat temp*.txt | sort -u > "$out"
            rm temp*.txt

            old_file="old_subdomains/${domain//./_}_old_subdomains.txt"
            if [ ! -f "$old_file" ] || ! diff -q "$out" "$old_file" > /dev/null; then
              echo "üî• New or first scan for $domain"
              cp "$out" "$old_file"
              new_subdomains_found+=("$domain")
            fi

            if [ -s "$out" ]; then
              echo "üß¨ Fingerprinting and scanning live hosts for $domain"
              httpx -l "$out" -tech-detect -status-code -title -server -ip -json > "fingerprints/${domain//./_}.json" || true
              naabu -l "$out" -o "naabu/${domain//./_}_ports.txt" -silent || true
              gau "$domain" > "gau/${domain//./_}.txt" || true
              hakrawler -url "https://$domain" > "hakrawler/${domain//./_}.txt" || true
              nmap -iL "$out" -oN "nmap/${domain//./_}.txt" || true
              waybackurls "$domain" > "wayback/${domain//./_}.txt" || true
              nuclei -l "$out" -severity critical,high,medium,low,info -j -o "nuclei-reports/nuclei-${domain//./_}.json" -timeout 30 -silent || true
            fi

          done < .github/workflows/domains.txt

          echo "NEW_DOMAINS=${new_subdomains_found[*]}" >> $GITHUB_ENV
          echo "new_subdomains_detected=$([ ${#new_subdomains_found[@]} -gt 0 ] && echo true || echo false)" >> $GITHUB_ENV

      - name: Notify Slack of Critical/High Findings
        if: env.new_subdomains_detected == 'true'
        run: |
          for file in nuclei-reports/*.json; do
            jq -c 'select(.info.severity == "critical" or .info.severity == "high")' "$file" | while read -r vuln; do
              domain=$(basename "$file" | sed 's/nuclei-\(.*\)\.json/\1/' | tr '_' '.')
              title=$(echo "$vuln" | jq -r '.info.name')
              url=$(echo "$vuln" | jq -r '.matched')
              severity=$(echo "$vuln" | jq -r '.info.severity')
              curl -X POST -H 'Content-type: application/json' \
                --data "{\"text\":\"‚ö†Ô∏è *Critical/High vulnerability detected!*\\n*Domain:* $domain\\n*Severity:* $severity\\n*Name:* $title\\n*URL:* $url\"}" \
                ${{ secrets.SLACK_HOOK }}
            done
          done
