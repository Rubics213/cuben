name: Optimized Vulnerability Scan

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '13 1 * * *'

jobs:
  vulnerability-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # Hard limit to prevent 6-hour runs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install scanning dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git python3 python3-pip nikto nmap unzip wget golang parallel
          
          # Install AssetFinder
          go install github.com/tomnomnom/assetfinder@latest
          sudo mv ~/go/bin/assetfinder /usr/local/bin/
          
          # Install Amass (optimized)
          wget -q https://github.com/owasp-amass/amass/releases/download/v4.2.0/amass_linux_amd64.zip
          unzip -q amass_linux_amd64.zip
          sudo mv amass_linux_amd64/amass /usr/local/bin/

      - name: Verify domains file exists
        run: |
          if [ ! -f ".github/workflows/domains.txt" ]; then
            echo "ERROR: domains.txt file not found at .github/workflows/domains.txt"
            exit 1
          fi

      - name: Parallel Subdomain Detection
        id: subdomain-detection
        run: |
          set -e
          mkdir -p subdomain_output old_subdomains
          
          # Process domains in parallel
          cat .github/workflows/domains.txt | parallel -j 4 --lb '
            domain={}
            output_file="subdomain_output/${domain//\//_}_subdomains.txt"
            
            echo "Processing $domain"
            
            # Run tools with timeouts
            timeout 30 assetfinder --subs-only $domain > $output_file
            timeout 60 amass enum -passive -d $domain >> $output_file 2>/dev/null
            
            # Deduplicate results
            sort -u $output_file -o $output_file
            sed -i "/^$/d" $output_file
            
            # Compare with previous results
            if [ -f "old_subdomains/${domain//\//_}_old_subdomains.txt" ]; then
              if ! diff -q $output_file "old_subdomains/${domain//\//_}_old_subdomains.txt"; then
                echo "new_subdomain_detected=true" >> $GITHUB_ENV
              fi
            else
              echo "new_subdomain_detected=true" >> $GITHUB_ENV
            fi
            
            # Save results for next run
            cp $output_file "old_subdomains/${domain//\//_}_old_subdomains.txt"
          '
          
          # Set final flag if any new subdomains were found
          if [ "$(grep -c "new_subdomain_detected=true" $GITHUB_ENV)" -gt 0 ]; then
            echo "new_subdomains_detected=true" >> $GITHUB_ENV
          else
            echo "new_subdomains_detected=false" >> $GITHUB_ENV
          fi

      - name: Optimized ZAP Scan
        if: env.new_subdomains_detected == 'true'
        uses: zaproxy/action-af@v0.2.0
        with:
          plan: '.github/workflows/zap/plan.yml'
          cmd_options: '-config scan.maxDuration=60 -t 5'  # Limit to 1 hour, 5 threads

      - name: Fast Nikto Scans
        if: env.new_subdomains_detected == 'true'
        run: |
          mkdir -p nikto-reports
          cat .github/workflows/domains.txt | parallel -j 3 '
            domain={}
            echo "Scanning $domain with Nikto (timeout 15m)"
            timeout 15m nikto -h "https://$domain" -Format htm -output "nikto-reports/nikto-report-${domain//\//_}.html" -Tuning x 6
          '

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            subdomain_output/*
            nikto-reports/*.html

      - name: Slack Notification
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          slack-message: |
            :shield: *Scan Completed* (${{ job.status }})
            • Run: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|#${{ github.run_number }}>
            • Duration: ${{ job.steps.*.outcome }}
            • New Subdomains: ${{ env.new_subdomains_detected == 'true' && 'Yes' || 'No' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.Slack_Hook }}
