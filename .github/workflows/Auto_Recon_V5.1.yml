name: Vulnerability Scanning & Subdomain Detection

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '10 1 * * 1'  # Random time: update this to a more random schedule periodically

jobs:
  vulnerability-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Sublist3r with Randomized User-Agent
      - name: Install Sublist3r dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git python3 python3-pip
          git clone https://github.com/aboul3la/Sublist3r.git
          cd Sublist3r
          pip3 install -r requirements.txt

      # Use Sublist3r to detect subdomains (randomized delays and proxy support)
      - name: Detect subdomains
        run: |
          set -e
          mkdir -p subdomain_output old_subdomains
          new_subdomains_detected=false

          # Read domains from the correct path
          while IFS= read -r domain; do
            echo "Finding subdomains for $domain"
            output_file="subdomain_output/${domain//https:\/\//}_subdomains.txt"
            
            # Randomize delay between scans (between 30 to 90 seconds)
            sleep $((RANDOM % 60 + 30))

            # Randomize User-Agent to avoid detection
            python3 Sublist3r/sublist3r.py -d "$domain" -o "$output_file" --user-agent "Mozilla/5.0 (Windows NT $((RANDOM % 10 + 5)).$((RANDOM % 3)); Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.$((RANDOM % 100 + 100)).$((RANDOM % 100 + 100)) Safari/537.36" 

            # Check if output file was created
            if [ -f "$output_file" ]; then
              echo "Subdomain output file created: $output_file"
              # Check for new subdomains
              if [ -f "old_subdomains/${domain//https:\/\//}_old_subdomains.txt" ]; then
                if ! diff "$output_file" "old_subdomains/${domain//https:\/\//}_old_subdomains.txt"; then
                  echo "New subdomains detected for $domain"
                  new_subdomains_detected=true
                fi
              else
                echo "First run for $domain, no old subdomains to compare."
                new_subdomains_detected=true
              fi

              # Save current subdomains for the next run
              cp "$output_file" "old_subdomains/${domain//https:\/\//}_old_subdomains.txt"
            else
              echo "No subdomains found for $domain. Skipping comparison."
            fi
          done < .github/workflows/domains.txt  # Ensure this points to the correct location

          # Set output variable for new subdomains detection
          echo "new_subdomains_detected=${new_subdomains_detected}" >> $GITHUB_ENV

      # Run OWASP ZAP Scan only if new subdomains were detected (randomized delay + rate limit)
      - name: Run OWASP ZAP Scan
        if: env.new_subdomains_detected == 'true'
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'https://linkedin.com'  # Update with the actual target domain
          rules_file_name: '.github/zap/rules.tsv'
        env:
          ZAP_RATELIMIT: '2'  # Limits the number of requests per second to avoid rate-limiting

      - name: Upload ZAP report
        if: env.new_subdomains_detected == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: owasp-zap-report.html

      # Install Nikto (with Proxy Support and Randomized Options)
      - name: Install Nikto
        run: sudo apt-get update && sudo apt-get install -y nikto

      # Run Nikto Scan only if new subdomains were detected
      - name: Run Nikto Scan
        if: env.new_subdomains_detected == 'true'
        run: |
          mkdir -p nikto-output
          # Random delay before running Nikto to mimic natural activity
          sleep $((RANDOM % 60 + 30))
          nikto -h https://linkedin.com -output nikto-output/nikto_report.txt -useragent "Mozilla/5.0 (Windows NT $((RANDOM % 10 + 5)); WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/$((RANDOM % 100 + 80)).0.$((RANDOM % 100 + 300)).$(($RANDOM % 100 + 200)) Safari/537.36"  # Update with the actual target domain

      - name: Upload Nikto report
        if: env.new_subdomains_detected == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: nikto-report
          path: nikto-output/nikto_report.txt

      # Email Notification (if new subdomains detected)
      - name: Send Email Notification
        if: env.new_subdomains_detected == 'true'
        run: |
          sudo apt-get install -y msmtp
          echo "account default" > ~/.msmtprc
          echo "host ${{ secrets.SMTP_SERVER }}" >> ~/.msmtprc
          echo "port ${{ secrets.SMTP_PORT }}" >> ~/.msmtprc
          echo "auth on" >> ~/.msmtprc
          echo "user ${{ secrets.EMAIL_USERNAME }}" >> ~/.msmtprc
          echo "password ${{ secrets.EMAIL_PASSWORD }}" >> ~/.msmtprc
          echo "tls on" >> ~/.msmtprc
          echo "tls_starttls on" >> ~/.msmtprc
          echo "from ${{ secrets.EMAIL_USERNAME }}" >> ~/.msmtprc
          echo "logfile ~/.msmtp.log" >> ~/.msmtprc

          echo -e "Subject: Scan Completed: New Subdomains Detected\n\nOWASP ZAP and Nikto scans have been completed. New subdomains were detected and scanned. Reports have been uploaded." \
          | msmtp beetlerecon997@outlook.com

      - name: Display Scan Summary
        run: |
          echo "OWASP ZAP and Nikto Scans Completed"
