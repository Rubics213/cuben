- name: Install scanning dependencies
        run: |
          # Enable command tracing for detailed debugging output
          set -x
          # Exit immediately if a command exits with a non-zero status
          set -e

          sudo apt-get update
          sudo apt-get install -y git python3 python3-pip nikto nmap unzip wget golang jq curl

          # Set Go environment variables
          echo "GOPATH=$HOME/go" >> $GITHUB_ENV
          echo "PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $GITHUB_ENV

          # Create Go bin directory if it doesn't exist, though go install usually does
          mkdir -p "$HOME/go/bin"

          echo "Installing Go tools..."
          go install github.com/tomnomnom/assetfinder@latest
          go install github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          go install github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install github.com/lc/gau/v2/cmd/gau@latest
          go install github.com/projectdiscovery/katana/cmd/katana@latest
          go install github.com/sensepost/gowitness@latest # For web screenshots

          echo "Contents of Go bin directory before moving:"
          ls -l "$HOME/go/bin/" || true

          echo "Moving Go binaries to /usr/local/bin/"
          for tool in assetfinder nuclei httpx subfinder gau katana gowitness; do
            if [ -f "$HOME/go/bin/$tool" ]; then
              sudo mv "$HOME/go/bin/$tool" /usr/local/bin/
              echo "Moved $tool successfully."
            else
              echo "ERROR: Go tool '$tool' not found in $HOME/go/bin/. It might not have installed correctly."
              exit 1
            fi
          done

          # --- FIX: Download and install github-endpoints as ZIP to bypass Git clone issues ---
          echo "Downloading and installing github-endpoints from ZIP to bypass Git authentication issues..."
          # Removed -q for more verbose output, added retries and wait
          wget --tries=5 --wait=5 https://github.com/initstring/github-endpoints/archive/refs/heads/main.zip -O /tmp/github-endpoints.zip || { echo "ERROR: Failed to download github-endpoints.zip from GitHub."; exit 1; }
          unzip -q /tmp/github-endpoints.zip -d /tmp/ || { echo "ERROR: Failed to unzip github-endpoints.zip"; exit 1; }
          pip3 install /tmp/github-endpoints-main || { echo "ERROR: Failed to install github-endpoints."; exit 1; }
          # Clean up downloaded zip and extracted folder
          rm /tmp/github-endpoints.zip
          rm -rf /tmp/github-endpoints-main
          echo "github-endpoints installed successfully."
          # --- END FIX ---

          # Install Findomain
          echo "Installing Findomain..."
          curl -s https://api.github.com/repos/findomain/findomain/releases/latest \
            | grep "browser_download_url.*linux.zip" \
            | cut -d '"' -f 4 \
            | wget -i - || { echo "ERROR: Failed to download Findomain zip URL."; exit 1; }
          unzip findomain-linux.zip || { echo "ERROR: Failed to unzip Findomain."; exit 1; }
          chmod +x findomain
          sudo mv findomain /usr/local/bin/findomain || { echo "ERROR: Failed to move Findomain to /usr/local/bin."; exit 1; }
          echo "Findomain installed successfully."

          # Update Nuclei templates to the latest version
          echo "Updating Nuclei templates..."
          nuclei -update-templates -silent || { echo "WARNING: Nuclei template update failed."; }
          echo "Nuclei templates updated."
