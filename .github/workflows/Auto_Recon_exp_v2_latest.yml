name: Vulnerability Scanning & Subdomain Detection

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Manual trigger
  
  # Randomized cron jobs
  schedule:
    # Randomized time 1: e.g., every day at 1:23 AM
    - cron: '23 1 * * *'
    # Randomized time 2: e.g., every Monday at 10:46 PM
    - cron: '46 22 * * 1'
    # Randomized time 3: e.g., every Wednesday at 6:17 AM
    - cron: '17 6 * * 3'
    # Randomized time 4: e.g., every Friday at 11:39 PM
    - cron: '39 23 * * 5'
    # Randomized time 5: e.g., every Sunday at 2:58 PM
    - cron: '58 14 * * 0'
    # Randomized time 6: e.g., every other day at 3:07 PM
    - cron: '7 15 */2 * *'

jobs:
  vulnerability-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Dependencies (Sublist3r, Amass, Nikto, Nmap)
      - name: Install scanning dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git python3 python3-pip nikto nmap
          git clone https://github.com/aboul3la/Sublist3r.git
          cd Sublist3r
          pip3 install -r requirements.txt
          cd ..
          wget https://github.com/OWASP/Amass/releases/download/v3.15.0/amass_linux_amd64.zip
          unzip amass_linux_amd64.zip
          sudo mv amass_linux_amd64/amass /usr/local/bin/

      # Parallel Subdomain Enumeration (Sublist3r + Amass)
      - name: Detect subdomains with Sublist3r and Amass
        run: |
          set -e
          mkdir -p subdomain_output old_subdomains
          new_subdomains_detected=false

          # Read domains from the correct path
          while IFS= read -r domain; do
            echo "Finding subdomains for $domain"
            sublist3r_output="subdomain_output/${domain//https:\/\//}_sublist3r.txt"
            amass_output="subdomain_output/${domain//https:\/\//}_amass.txt"
            combined_output="subdomain_output/${domain//https:\/\//}_combined_subdomains.txt"

            # Run Sublist3r and Amass in parallel
            python3 Sublist3r/sublist3r.py -d "$domain" -o "$sublist3r_output" &
            amass enum -d "$domain" -o "$amass_output" &
            wait

            # Combine results from both tools
            cat "$sublist3r_output" "$amass_output" | sort -u > "$combined_output"

            # Check for new subdomains
            if [ -f "old_subdomains/${domain//https:\/\//}_old_subdomains.txt" ]; then
              if ! diff "$combined_output" "old_subdomains/${domain//https:\/\//}_old_subdomains.txt"; then
                echo "New subdomains detected for $domain"
                new_subdomains_detected=true
              fi
            else
              echo "First run for $domain, no old subdomains to compare."
              new_subdomains_detected=true
            fi

            # Save current subdomains for the next run
            cp "$combined_output" "old_subdomains/${domain//https:\/\//}_old_subdomains.txt"
          done < .github/workflows/domains.txt  # Ensure this points to the correct location

          # Set output variable for new subdomains detection
          echo "new_subdomains_detected=${new_subdomains_detected}" >> $GITHUB_ENV

      # Run OWASP ZAP Scan only if new subdomains were detected
      - name: Run OWASP ZAP Scan
        if: env.new_subdomains_detected == 'true'  # Run ZAP only if new subdomains detected
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'https://linkedin.com'  # Update with the actual target domain
          rules_file_name: '.github/zap/rules.tsv'  # Optional: Custom rules can be defined here

      - name: Upload ZAP report
        if: env.new_subdomains_detected == 'true'  # Upload report only if new subdomains detected
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: owasp-zap-report.html  # Default report name generated by the ZAP action

      # Run Nikto Scan only if new subdomains were detected
      - name: Run Nikto Scan
        if: env.new_subdomains_detected == 'true'  # Run Nikto only if new subdomains detected
        run: |
          mkdir -p nikto-output
          nikto -h https://linkedin.com -output nikto-output/nikto_report.txt  # Update with the actual target domain

      - name: Upload Nikto report
        if: env.new_subdomains_detected == 'true'  # Upload report only if new subdomains detected
        uses: actions/upload-artifact@v4
        with:
          name: nikto-report
          path: nikto-output/nikto_report.txt

      # Run Nmap Scan only if new subdomains were detected
      - name: Run Nmap Scan
        if: env.new_subdomains_detected == 'true'
        run: |
          mkdir -p nmap-output
          nmap -A -oN nmap-output/nmap_report.txt -iL subdomain_output/*_combined_subdomains.txt

      - name: Upload Nmap report
        if: env.new_subdomains_detected == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: nmap-report
          path: nmap-output/nmap_report.txt

      - name: Display Scan Summary
        run: |
          echo "OWASP ZAP, Nikto, and Nmap Scans Completed"
